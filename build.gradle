import org.jooq.util.GenerationTool
import org.jooq.util.jaxb.*

buildscript {
    ext {
        kotlinVersion = '1.1.1'
        springBootVersion = '1.5.2.RELEASE'
        jooqVersion = '3.9.1'
        flywayVersion = '4.1.1'
        h2Version = '1.4.193'
        swaggerVersion = '2.6.1'
    }
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
        classpath "org.jooq:jooq-codegen:${jooqVersion}"
        classpath "com.h2database:h2:${h2Version}"
        classpath "gradle.plugin.com.boxfuse.client:flyway-release:${flywayVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
// It's just needed for JOOQ codegen
apply plugin: "org.flywaydb.flyway"

jar {
    baseName = 'springboot-angular2-tutorial'
    version = '0.0.1'
}

sourceCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jooq'
    compile group: 'org.springframework.boot', name: 'spring-boot-actuator'
    compile group: 'org.springframework.boot', name: 'spring-boot-devtools'
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinVersion
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.8.6'
    compile group: 'org.jooq', name: 'jooq', version: jooqVersion
    compile group: 'org.flywaydb', name: 'flyway-core', version: flywayVersion
    compile group: 'com.zaxxer', name: 'HikariCP'
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.7.0'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: swaggerVersion
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: swaggerVersion
    compile group: 'com.github.ulisesbocchio', name: 'jasypt-spring-boot-starter', version: '1.11'
    runtime group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '1.5.8'
    runtime group: 'com.h2database', name: 'h2', version: h2Version
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: kotlinVersion
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.2'
    testCompile group: 'com.nhaarman', name: 'mockito-kotlin', version: '1.1.0'
    testCompile group: 'com.beust', name: 'klaxon', version: '0.27'
}

flyway {
    url = 'jdbc:h2:./db/tmp;MODE=MySQL'
    user = 'sa'
    password = ''
}

task jooqGenerate {
    doLast {
        Configuration configuration = new Configuration()
                .withJdbc(new Jdbc()
                    .withDriver("org.h2.Driver")
                    .withUrl("jdbc:h2:./db/tmp;MODE=MySQL")
                    .withUser("sa")
                    .withPassword("")
                )
                .withGenerator(new Generator()
                    .withDatabase(new Database()
                        .withInputSchema("public")
                        .withOutputSchemaToDefault(true)
                    )
                    .withTarget(new Target()
                        .withPackageName("com.myapp.generated")
                        .withDirectory("src/main/java")
                    )
                )
        GenerationTool.generate(configuration)
    }
}
jooqGenerate.dependsOn flywayMigrate

